---
title: | 
  Reproduzierbare Forschung \
  mit R und Quarto -- Praktischer Teil
subtitle: Workshop für die GSE Wuppertal
date:  "27. Juni, 2025"
date-format: long
author:
  - Björn S. Siepe
editor: source
preview-links: true
include-in-header:
  - text: |
      <style>
      #title-slide .title {
        font-size: 1.8em;
        color: #29487d;
      }
      </style>
format: 
  revealjs:
    menu: true
    pdf: true
    smaller: true
    auto-stretch: false
    embed-resources: true
    progress: true
    incremental: true
    standalone: true
    slide-number: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    title-slide-attributes:
      data-background-size: contain
      data-background-position: bottom
      data-background-opacity: "0.8"
bibliography: references.bib
---
# Quarto/Markdown Grundlagen

## YAML Header
-   Enthält Metadaten für das Dokument
-   Beispiel:

```{markdown}
#| code-line-numbers: "1-2, 3-6, 7-18, 19-21"
title: "Using features of dynamic networks to guide treatment selection and outcome prediction"
subtitle: "Simulation Code"
author: 
 - name: Björn S. Siepe
   orcid: 0000-0002-9558-4648
   affiliations: University of Marburg
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    number-sections: true
    theme: cosmo
    code-fold: true
    code-tools: true
    code-summary: "Show the code"
    fig-width: 7
    fig-height: 4.5
    fig-align: "center"
    embed-resouces: true
execute:
  message: false
  warning: false
  eval: false
```

## Text

Basierend auf markdown: 
````markdown
## Formatierung
*italic* **bold** ~~strikeout~~ `code`
superscript^2^ subscript~2~
[underline]{.underline} [small caps]{.smallcaps}

## Überschriften
# Erste Ebene
## Zweite Ebene
### Dritte Ebene

## Listen
-   Punkt 1 einer Liste
-   Punkt 2
    -   Punkt 2a
    -   Punkt 2b

1.  Nummerierte Liste Punkt 1
2.  Punkt 2.
    Die Zahlen der Liste werden automatisch angepasst.
    
## Quotes
> Gutes Zitat hier.
````

::: aside
@wickham2023
:::

## Code Chunks - Basics

::: columns
::: {.column width="50%"}
### Quarto Input

```{{r}}
mean(c(1, 2, 3, 4, 5))
```

```{{r}}
#| label: my-plot
#| echo: false
plot(cars)
```

```{{python}}
import pandas as pd
df = pd.DataFrame({'x': [1, 2, 3]})
print(df)
```

:::

::: {.column width="50%"}
### Rendered Output
```{r}
mean(c(1, 2, 3, 4, 5))
```

**Plot (with echo: false):**
```{r}
#| echo: false
plot(cars, main="Speed vs Distance")
```

**Python output:**
```
   x
0  1
1  2
2  3
```
:::
:::

::: aside
@wickham2023
:::


## Code Chunks: Anpassung

-   Code Chunks können mit verschiedenen Optionen angepasst werden
    - Namen
    - Ausführung
    - Abbildungsoptionen

::: fragment
```{{r}}
#| label: Beispielchunk
#| echo: true 
#| fig-width: 6
```
::: 

## Code Chunks: Optionen

Verschiedene Optionen können in den Code Chunks verwendet werden:

![@wickham2023](img/chunk-options.png){fig-align="center" width="950"}


## Inline Code

- Inline Code wird mit `r` oder `python` in Backticks geschrieben:

::: fragment
````markdown
Der Mittelwert der ganzen Zahlen von 1 bis 5 ist "`{r} mean(c(1, 2, 3, 4, 5))`".
````
::: 

::: fragment
Ergibt:

Der Mittelwert der ganzen Zahlen von 1 bis 5 ist `r mean(c(1, 2, 3, 4, 5))`.
::: 


## Visual Editor

- Quarto bietet einen Visual Editor, der die Bearbeitung von Markdown-Dateien erleichtert
- Er kann über das Menü "View" → "Visual Editor" aktiviert werden
- Er ermöglicht eine WYSIWYG-Erfahrung

## Übung 1

Zeit zum Üben!

- Laden Sie entweder `aufgabe_01.qmd` herunter oder erstellen Sie eine neue Quarto-Datei.
- Personalisieren Sie den YAML-Header.
- Laden Sie den "USArrests" Datensatz in R. Dies geht mit `data("USArrests")`.
- Schreiben Sie einen kurzen Einleitungstext für eine Beispielanalyse. Verwenden Sie unterschiedliche Formatierungen.
- Berichten Sie über das Minimum und Maximum einer der Variablen in einem Satz.

## Abbildungen

- Beispiel:

::: fragment
```{r}
#| echo: true
#| fig-width: 9
#| fig-height: 5
#| code-fold: true

data("USArrests")
library(ggplot2)
ggplot(USArrests, aes(x = UrbanPop, y = Murder, color = Assault)) +
  geom_point(size = 3, alpha = 0.8) +
  scale_color_gradient(low = "#56B1F7", high = "#132B43") +
  labs(
    title = "Zusammenhang zwischen Urbanisierung und Mordrate",
    subtitle = "USArrests Datensatz (1973)",
    x = "Anteil Stadtbevölkerung (%)",
    y = "Mordrate pro 100.000 Einwohner",
    color = "Anzahl\nAssault"
  ) +
  theme_minimal(base_size = 14)
```
:::

## Mehrere Abbildungen

- Wir können auch mehrere Abbildungen zusammen einfügen:

::: fragment
```{r}
#| echo: false
#| fig-width: 4
#| fig-height: 4
#| layout-ncol: 2
#| code-fold: true

# Scatterplot
library(ggplot2)
data("USArrests")

p1 <- ggplot(USArrests, aes(x = UrbanPop, y = Murder)) +
  geom_point(color = "#56B1F7", size = 2) +
  geom_smooth(method = "lm", se = FALSE, color = "#132B43") +
  labs(
    title = "Urbanisierung vs. Mordrate",
    x = "Anteil Stadtbevölkerung (%)",
    y = "Mordrate pro 100.000"
  ) +
  theme_minimal()

# Histogram
p2 <- ggplot(USArrests, aes(x = Assault)) +
  geom_histogram(bins = 15, fill = "#56B1F7", alpha = 0.7) +
  labs(
    title = "Verteilung der Assault-Raten",
    x = "Assault pro 100.000 Einwohner",
    y = "Anzahl Bundesstaaten"
  ) +
  theme_minimal()

# Anzeigen
p1
p2
```
::: 

## Externe Grafiken

- Externe Bilder können mit Markdown-Syntax oder knitr::include_graphics() eingefügt werden:

::: fragment
**Markdown-Syntax:**
````markdown
![Bildbeschreibung](pfad/zum/bild.png){width=50%}
````
::: 

::: fragment
**R Code Chunk:**
```{r}
#| echo: true
#| eval: false
#| fig-cap: "Externes Bild"
#| out-width: "60%"

knitr::include_graphics("images/my_plot.png")
```
::: 

::: fragment
**Online-Bilder:**
````markdown
![R Logo](https://www.r-project.org/logo/Rlogo.png){width=200px}
````
:::

## Tabellen: In Quarto

-   Tabellen können in Quarto mit Markdown-Syntax erstellt werden.
-   Beispiel:

::: fragment

| Bundesstaat | Mordrate | UrbanPop | Assault |
|-------------|----------|----------|---------|
| Alabama     | 13.2     | 58.0     | 236.0   |
| Alaska      | 10.0     | 48.0     | 263.0   |
|-------------|----------|----------|---------|


:::

## Tabellen: In R

-   Tabellen können mit vielen Paketen erstellt werden, z.B. `kable`, `gt`, `flextable` oder `pander`.
-   Beispiel mit `kable`:

::: fragment
```{r}
#| echo: true

data("USArrests")
library(knitr)
kable(head(USArrests), caption = "Erste 6 Zeilen des USArrests Datensatzes") 
``` 
:::


## Tabellen: Formatierung

-  Tabellen können mit verschiedenen Paketen formatiert werden
-  Dabei können sehr schöne und anpassbare Tabellen erstellt werden, die auch Visualisierungen enthalten können
-  Simples Beispiel mit `gt` und `gtExtras`:

::: fragment
```{r}
#| code-fold: true
library(gt)
library(gtExtras)
gtExtras::gt_plt_summary(USArrests)
```



## Tabellen-Export für Manuskripte
-   Tabellen können in verschiedenen Formaten exportiert werden, z.B. LaTeX, HTML oder Word.
-   Beispiel mit `flextable` für eine APA-konforme Tabelle:

::: fragment
```{r}
#| echo: true
#| eval: false
library(flextable)
tabelle <- flextable(head(USArrests))

tabelle |>
  save_as_docx("USArrests_table.docx", path = here::here("tables"))
``` 
:::

## Übung 2

-   Verwenden Sie entweder Ihr existierendes Quarto-Dokument oder laden Sie `aufgabe_02.qmd` herunter.
-   Fügen Sie eine Abbildung hinzu, die den Zusammenhang zwischen "UrbanPop" und "Assault" im USArrests Datensatz zeigt.
     - Ändern Sie die Größe der Abbildung. 
     - Optional: Speichern Sie die Abbildung und laden Sie als externes Bild ein.
-   Fügen Sie eine Tabelle hinzu.
-   Versuchen Sie, die Tabelle schöner zu formatieren.

## Referenzen

-   Referenzen können mit BibTeX-Dateien eingebunden werden. 
-   Als Beispiel verwenden wir `referenzen.bib`. Dies müssen wir im YAML-Header angeben:

:::fragment
````yaml
bibliography: referenzen.bib
csl: apa.csl  # Optional: Style
````
:::

- Ein Zitat kann dann so aussehen: 
  - `[@wickham2016]` → (Wickham, 2016)
  - `@wickham2016` → Wickham (2016)
  - `[@wickham2016; @r2023]` → (Wickham, 2016; R Core Team, 2023)


## BibTeX Beispiel

Eine typische `referenzen.bib` Datei sieht so aus:

```bibtex
@book{wickham2016,
  title = {R for Data Science},
  author = {Hadley Wickham and Garrett Grolemund},
  year = {2016},
  publisher = {O'Reilly Media},
  isbn = {978-1491910399}
}

@manual{r2023,
  title = {R: A Language and Environment for Statistical Computing},
  author = {{R Core Team}},
  organization = {R Foundation for Statistical Computing},
  address = {Vienna, Austria},
  year = {2023},
  url = {https://www.R-project.org/}
}
```
## Verschiedene Zitierweisen

| Syntax | Ausgabe | Verwendung |
|--------|---------|------------|
| `[@autor2023]` | (Autor, 2023) | Normale Klammerzitate |
| `@autor2023` | Autor (2023) | Autor als Teil des Satzes |
| `[@autor2023, S. 15]` | (Autor, 2023, S. 15) | Mit Seitenzahl |
| `[-@autor2023]` | (2023) | Nur Jahr, ohne Autor |
| `[@autor2023; @autor2024]` | (Autor, 2023, 2024) | Mehrere Quellen |

## Referenzen hinzufügen

**Manuell in der BibTeX-Datei:**
- Direkt in `referenzen.bib` editieren
- Google Scholar: "Zitieren" → "BibTeX" kopieren (und DOI hinzufügen)

**Zotero Integration:**
- Better BibTeX Plugin installieren
- Auto-Export zu `.bib` Datei
- Sync zwischen Zotero und Quarto

**RStudio Visual Editor:**
- `Insert` → `Citation` 
- Automatisches Hinzufügen zur `.bib` Datei

## Literaturverzeichnis

- Wird automatisch am Ende des Dokuments eingefügt
- Nur zitierte Quellen werden angezeigt
- Anpassung der Position:

::: fragment
````markdown
# Literatur
::: {#refs}
:::

# Anhang
Weiterer Inhalt nach dem Literaturverzeichnis...
````
::: 

## Rechenintensive Chunks

-   Teilweise möchten wir Code nicht ausführen, wenn das Dokument gerendert wird
    -  z.B. bei rechenintensiven Operationen
    -  Ausführung des Codes auf einem Server
    -  oder bei Zufallsimulationen
    -  oder wenn wir nur den Code zeigen wollen
-   Beispiel für die Übung gleich:

::: fragment
```{r}
#| label: bootstrap-example
#| echo: true
#| eval: false

data("USArrests")

# Bootstrap durchführen, um Konfidenzintervall einer Regression zu schätzen
n_boot <- 1000
bootstrap_results <- numeric(n_boot)

# Bootstrap durchführen und Zeit messen
system.time({
  for(i in 1:n_boot) {
    # Zufälliges Sampling mit Zurücklegen
    boot_sample <- sample(nrow(USArrests), replace = TRUE)
    boot_data <- USArrests[boot_sample, ]
    
    
    boot_model <- lm(Murder ~ UrbanPop, data = boot_data)
    # Extrahieren der Slope
    bootstrap_results[i] <- coef(boot_model)[2]  
  }
})

# Konfidenzintervall berechnen
ci_lower <- quantile(bootstrap_results, 0.025)
ci_upper <- quantile(bootstrap_results, 0.975) 


``` 
:::

## Übung 3


-   Arbeiten sie entweder in Ihrer existierenden Quarto- Datei weiter oder verwenden Sie `aufgabe_03.qmd`.
-   Fügen Sie eine Referenz zu einem Buch oder Artikel hinzu, den Sie interessant finden. 
-   Lassen Sie das Literaturverzeichnis am Ende des Dokuments erscheinen.
-   Führen Sie eine Regression auf den USArrests Datensatz durch und speichern Sie das Ergebnis. Sorgen Sie dafür, dass der Code nicht ausgeführt wird, wenn das Dokument gerendert wird. 
-   Optional: Versuchen Sie, das Dokument so zu formatieren, dass es möglichst nah an einen echten Artikel herankommt.

## Zusätzliche Vorteile von Quarto - Code-Highlighting

::: columns
::: {.column width="50%"}
###  Quarto Input
`````markdown
```{r}
#| code-line-numbers: "1-2,4-5"
library(ggplot2)
data(mtcars)
# Create visualization
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point() + theme_minimal()
```

`````
:::

::: {.column width="50%"}
###  Rendered Output

```{r}
#| code-line-numbers: "1-2,4-5"
#| echo: true
#| eval: false
library(ggplot2)
data(mtcars)
# Create visualization
ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point() + theme_minimal()
```


:::
:::

---

## Zusätzliche Vorteile von Quarto - Tabsets

````{.markdown}
::: {.panel-tabset}

### Code

Hier könnten Sie R Code einfügen, der eine Abbildung erstellt.

### Figure

ggplot Code hier einfügen

:::
````

## Zusätzliche Vorteile von Quarto - Tabsets

::: {.panel-tabset}

### R Code

Hier kann man den R Code einfügen:

````{.markdown}
```{{r}}
library(ggplot2)
data(USArrests)
ggplot(USArrests, aes(x = UrbanPop, y = Assault)) +
  geom_point(color = "#56B1F7", size = 2) +
  labs(
    title = "Zusammenhang zwischen Urbanisierung und Assault-Rate",
    x = "Anteil Stadtbevölkerung (%)",
    y = "Assault pro 100.000 Einwohner"
  ) +
  theme_minimal()
```
```` 

### Abbildung

```{r}
library(ggplot2)
data(USArrests)
ggplot(USArrests, aes(x = UrbanPop, y = Assault)) +
  geom_point(color = "#56B1F7", size = 2) +
  labs(
    title = "Zusammenhang zwischen Urbanisierung und Assault-Rate",
    x = "Anteil Stadtbevölkerung (%)",
    y = "Assault pro 100.000 Einwohner"
  ) +
  theme_minimal()
```

:::
---


## Zusätzliche Vorteile von Quarto - Cross-References

::: columns
::: {.column width="50%"}
### Quarto Input

::: fragment
`````markdown
Siehe @fig-scatter für den Zusammenhang 
zwischen städtischer Bevölkerung und 
Mordrate.

```{{r}}
#| label: fig-scatter
#| fig-cap: "Städtische Bevölkerung vs Mordrate"
data("USArrests")
plot(USArrests$UrbanPop, USArrests$Murder)
```

Wie in @tbl-summary gezeigt, beträgt 
die mittlere Mordrate 7.8.

```{{r}}
#| label: tbl-summary
#| tbl-cap: "Zusammenfassende Statistiken"
kable(summary(USArrests$Murder))
```

Die Analyse in @sec-methods 
erklärt unser Vorgehen. 

## Methoden {#sec-methods}
:::
`````
:::
:::

::: {.column width="50%"}
### Cross-Reference Features

**Vorteile:**

- **Automatisch aktualisiert** bei Änderungen
- **Klickbare Links** in HTML/PDF
- **Konsistente Formatierung**
- **Keine manuellen Nummern** erforderlich


:::
:::

---

## Zusätzliche Vorteile von Quarto - Conditional Content

::: columns
::: {.column width="50%"}
### Format-spezifischer Content
`````markdown
::: {.content-visible when-format="html"}
Dies ist nur im HTML-Format sichtbar.
[Interaktives Widget hier]
:::

::: {.content-visible when-format="pdf"}  
Dies ist nur im PDF-Format sichtbar.
Statische Darstellung hier.
:::

::: {.content-hidden when-format="revealjs"}
Dies ist nicht im Reveal.js Format sichtbar.
:::
`````


:::

::: {.column width="50%"}
### Profile-basierter Content
`````markdown
::: {.content-visible when-profile="advanced"}
Fortgeschrittene Details hier.
:::

::: {.content-visible when-profile="beginner"}  
Einfache  Einführung hier.
:::
`````

**Rendering:**
```bash
# Mit Profil rendern
quarto render --profile advanced
quarto render --profile beginner
```


:::
:::

## Session Info
```{r}
pander::pander(sessionInfo())
```
------------------------------------------------------------------------
## Literatur {.smaller}