---
title: | 
  Reproduzierbare Forschung \
  mit R und Quarto -- Einleitung
subtitle: Workshop f√ºr die GSE Wuppertal
date:  "27. Juni, 2025"
date-format: long
author:
  - Bj√∂rn S. Siepe
editor: source
preview-links: true
include-in-header:
  - text: |
      <style>
      #title-slide .title {
        font-size: 1.8em;
        color: #29487d;
      }
      </style>
format: 
  revealjs:
    menu: true
    pdf: true
    smaller: true
    auto-stretch: false
    embed-resources: true
    standalone: true
    progress: true
    code-line-numbers: true
    incremental: true
    slide-number: true
    title-slide-attributes:
      data-background-size: contain
      data-background-position: bottom
      data-background-opacity: "0.8"
bibliography: references.bib
---

# Einstieg
## Plan f√ºr Heute

1. **Einleitung**
   - Was ist Reproduzierbarkeit?
   - Einfache Strategien ("Easy Wins")
   - Einf√ºhrung in dynamische Berichte

2. **Praktischer Teil**
   - Erstellung dynamischer Berichte mit Quarto
   - Typische Herausforderungen und L√∂sungen

3. **Fortgeschrittene Themen**
   - N√§chste Schritte f√ºr mehr Reproduzierbarkeit
   - Tools und Best Practices

4. **Zusammenfassung & Abschlussdiskussion**
   - Was haben wir gelernt?
   - Offene Fragen & Ausblick

---

## Sehr grober Zeitplan

| Uhrzeit        | Programmpunkt                                |
|----------------|-----------------------------------------------|
| 10:00 ‚Äì 10:15  | Begr√º√üung & Einf√ºhrung                        |
| 10:15 ‚Äì 11:15  | **Einleitung**                                |
| 11:15 ‚Äì 11:20  | ‚òï Kurze Pause                                |
| 11:20 ‚Äì 12:30  | **Praktischer Teil 1**                         |
| 12:30 ‚Äì 13:15  | üçΩÔ∏è Mittagspause                              |
| 13:15 ‚Äì 14:20  | **Praktischer Teil 2**                         |
| 14:20 ‚Äì 14:30  | ‚òï Kurze Pause                                |
| 14:30 ‚Äì 15:30  | **Fortgeschrittene Themen**                   |
| 15:30 ‚Äì 16:00  | **Zusammenfassung & Abschlussdiskussion**     |

---

## Vorabinformation

Teile dieses Workshops beruhen teils verbatim oder sehr nah auf folgenden Ressourcen, 
welche ich mit einer CC-BY Lizenz verwende: 

-   [CRS Primer on dynamic reporting](https://doi.org/10.5281/zenodo.7565735)
-   @Molo2025 
-   @Peikert2025
-   @wickham2023

::: fragment
Materialien:

![](img/qr-code-wuppertal.png){fig-align="center" width="42%"}
::: 

------------------------------------------------------------------------

## Computational reproducibility

Eine sehr einfache Definition:

[Die **gleiche Analyse**]{.fragment} [der **gleichen Daten**]{.fragment} [f√ºhrt zu den **gleichen Ergebnissen**]{.fragment}

\ 

::: fragment
![@Turing2024](img/Turing-reproducible.png){fig-align="center" width="50%"}
:::
------------------------------------------------------------------------

## Beispiel

![](img/samuel2024.png){fig-align="center" width="75%"}

::: incremental
- Es wurde versucht, **22.578 Jupyter-Notebooks**, die mit 3.467 Publikationen aus PubMed verkn√ºpft sind, erneut auszuf√ºhren.
- F√ºr 10.388 dieser Notebooks konnten alle angegebenen Abh√§ngigkeiten erfolgreich installiert werden
- 1.203 Notebooks liefen ohne Fehler durch
- **879 Notebooks (4 %)** lieferten Ergebnisse, die mit denen des Originals identisch waren
:::

::: fragment
$\rightarrow$ **Computational reproducibility kann schwierig sein!**
:::
------------------------------------------------------------------------

## Beispiel: Nicht alles ist schlecht

-   Studie zu 110 Artikeln in √ñkonomie und Politikwissenschaft
-   √úber 85% der Artikel konnten reproduziert werden
-   Etwa 70% der Befunde waren robust gegen√ºber Alternativanalysen

::: fragment
>  This is likely influenced by our approach of targeting newer studies and nine (out of 12)
outlets internally conducting computational reproducibility checks.
:::

::: fragment
![@brodeur2024](img/brodeur2025.png){fig-align="center" width="65%" height="400"}
:::
------------------------------------------------------------------------

## Terminologie


![@theturingwaycommunity2022](img/turingway_reproducible_matrix.jpg){fig-align="center" width="75%"}

------------------------------------------------------------------------

## Computational Reproducibility

![](img/reproducible.png){.absolute right="0" top="0" height="75"}

![From @Molo2025, inspired by @peng2011 and @Peikert2021](img/comp-repro-spectrum.png)

------------------------------------------------------------------------

## Replicability: Beispiel

![](img/replicable.png){.absolute right="0" top="0" height="75"}

![@opensciencecollaboration2015](img/replicability_open_science_collaboration.jpeg){fig-align="center" width="640"}

------------------------------------------------------------------------

## Robustness: Beispiel

![](img/robust.png){.absolute right="0" top="0" height="75"}

::::: {.columns align="center"}
::: {.column width="50%"}
![@gould2023](img/ecology_1.png)
:::

::: {.column width="50%"}
![](img/ecology_2.png){height="400"}
:::
:::::

------------------------------------------------------------------------

## Generalizability

![](img/generalizable.png){.absolute right="0" top="0" height="75"}

<br>


![@Turing2024](img/Turing-generalisable.png){fig-align="center" width="50%"}

::: fragment
$\rightarrow$ **Reproducibility + Robustness + Replicability necessary for Generalizabilty!**
:::

------------------------------------------------------------------------

## Jeder Schritt z√§hlt

:::::::::::: {.columns align="center"}
:::::: fragment
::::: {.columns align="center"}
::: {.column width="72%"}
Aber reproduzierbare Forschung ist schwierig und kann sich √ºberw√§ltigend anf√ºhlen.
:::

::: {.column width="28%"}

:::
:::::
::::::

::::::: fragment
:::::: {.columns align="center"}
:::: {.column width="72%"}
Kein Grund zur Verzweiflung! Mit jedem Schrit:

::: incremental
-   seid Ihr einen Schritt n√§her an reproduzierbarer Forschung
-   verbessert Ihr die Qualit√§t eurer Forschung und erleichtert euer Leben
-   lernt Ihr breit anwendbare technische Skills
:::
::::

::: {.column width="28%"}

:::
::::::
:::::::
::::::::::::

------------------------------------------------------------------------

# Easy Wins

## Projektstruktur
### Vorher: Chaos üìÅ

::: fragment
```         
-   Paper_final_wirklich_final.docx 
-   daten.xlsx code_alt.R 
-   code_neu_funktioniert.R 
-   plot1.png 
```
:::

### Nachher: Ordnung ‚ú®

::: fragment
```         
projekt/
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îú‚îÄ‚îÄ raw/
‚îÇ   ‚îî‚îÄ‚îÄ processed/
‚îú‚îÄ‚îÄ scripts/
‚îú‚îÄ‚îÄ output/
‚îî‚îÄ‚îÄ README.md

```
:::

::: fragment
::::: callout-note
## Praxis-Tipp

Verwendet ein .Rproj f√ºr jedes neue Projekt in R! Erstellt ein Standard-Template f√ºr neue Projekte.
:::::
::: 
------------------------------------------------------------------------

## R-Project

![@wickham2023](img/r_project.png){fig-align="center" width="75%" height="400"}

------------------------------------------------------------------------

## Dateinamen

::: columns
::: {.column}
### ‚ùå Problematisch
- `Daten.xlsx`  
- `neue analyse.R`  
- `plot final FINAL.png`  
- `Fragebogen - Kopie (2).docx`
:::

::: {.column}
### ‚úÖ Besser
- `2025-06-28_fragebogen-daten-roh.xlsx`  
- `01_datenbereinigung.R`  
- `02_deskriptive-statistik.R`  
- `abb01_altersverteilung.png`
:::
:::

---

## Code-Dokumentation

### ‚ùå Unzureichend:
::: fragment
Unklarer Name, keine Dokumentation:
```r
logmlis <- function(x){
  lapply(x, function(x){
   y <- unlist(x)
   y <- y[!is.na(y)]
   y <- y[y != ""]
   return(mean(log(y)))
  })
}
```
:::

### ‚úÖ Besser:
::: fragment
Klarer Name, konzise Dokumentation:
```r
log_mean_list <- function(x) {
  # Calculates the logarithmic mean of a list of numerical values
  # Removes NA and empty values before the calculation
  y <- unlist(x)  
  y <- y[!is.na(y)]  
  y <- y[y != ""]  
  return(mean(log(y)))  
}
```
:::

---

## Code-Dokumentation

- Viele unterschiedliche 
- In der Softwareentwicklung: Oftmals Abneigung gegen zu ausf√ºhrlicher, repetitiver Dokumentation 
- In der Wissenschaft: Lieber etwas zu viel als zu wenig

::: fragment
::: {.callout-note}
## Praxis-Tipp
Nach @Peikert2025: 

1. Was standardisiert ist, muss nicht dokumentiert werden.
2. Was einfach ist, braucht nur wenig Dokumentation.
3. Was konsistent ist, muss nur einmal dokumentiert werden.
:::
:::

---

## Dateipfade

### ‚ùå Absoluter Pfad (schlecht):

::: fragment
```r         
daten <- read.csv("C:/Users/Maria/Desktop/Masterarbeit/daten.csv") 
```
**Problem:** Funktioniert nur auf Ihrem Computer!
:::

### ‚úÖ Relativer Pfad (gut):
::: fragment
```r        
daten <- read.csv("data/raw/fragebogen-daten.csv") 
```

Noch besser: Verwendung des `here` packages (funktioniert mit verschiedenen Systemen):
```r
library(here)
daten <- read.csv(here("data", "raw", "fragebogen-daten.csv"))
```
:::

------------------------------------------------------------------------


## Aufteilung in verschiedene Skripte

### ‚ùå Ein gro√ües Skript:
::: fragment
```r
# complete_analysis.R (500+ lines)
# Data import, cleaning, analysis, plots, export...
```
:::

### ‚úÖ Modulare Aufteilung:

::: fragment
- `01_data_import.R` - Rohdaten laden
- `02_data_cleaning.R` - Pr√§prozessierung
- `03_descriptive_analysis.R` - Deskriptive Statistiken
- `04_inferential_statistics.R` - Inferenz
- `05_visualization.R` - Abbildungen
- `06_export.R` - Export

**Vorteile:** √úbersichtlicher, leichter zu debuggen, bessere Zusammenarbeit
::: 
---

## Funktionsbasiertes Programmieren

### ‚ùå Code-Wiederholung:
::: fragment
```r
# Standardization for variable 1
data$var1_std <- (data$var1 - mean(data$var1, na.rm = TRUE)) / 
                 sd(data$var1, na.rm = TRUE)

# Standardization for variable 2  
data$var2_std <- (data$var2 - mean(data$var2, na.rm = TRUE)) / 
                 sd(data$var2, na.rm = TRUE)

# Standardization for variable 3...
```
::: 
### ‚úÖ Funktion erstellen:
::: fragment
```r
standardize_variable <- function(x) {
  # Z-standardization of a numeric variable
  (x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
}

# Anwendung
data$var1_std <- standardize_variable(data$var1)
data$var2_std <- standardize_variable(data$var2)
data$var3_std <- standardize_variable(data$var3)

# Oder besser:
data <- data |>
  mutate(across(starts_with("var"), standardize_variable))
```
:::
---

## Vermeiden von "magic numbers"

### ‚ùå Unklare Zahlen im Code:
::: fragment
```r
# What do these numbers mean?
clean_data <- data[data$age >= 18 & data$age <= 65, ]
final_data <- clean_data[clean_data$score > 2.5, ]
significant <- results[results$p_value < 0.05, ]
```
:::

### ‚úÖ Benannte Konstanten:
::: fragment
```r
# Clear definitions at the beginning of the script
MIN_AGE <- 18
MAX_AGE <- 65
MIN_SCORE <- 2.5
ALPHA_LEVEL <- 0.05

# Usage in code
clean_data <- data[data$age >= MIN_AGE & 
                   data$age <= MAX_AGE, ]
final_data <- clean_data[clean_data$score > MIN_SCORE, ]
significant <- results[results$p_value < ALPHA_LEVEL, ]
```

**Vorteil:** Code wird selbsterkl√§rend und leichter anpassbar
:::

---

## Session Info

### Warum wichtig?
- **Reproduzierbarkeit:** Welche R-Version und Pakete wurden verwendet?
- **Fehlerdiagnose:** Unterschiedliche Paketversionen k√∂nnen verschiedene Ergebnisse liefern
- **Dokumentation:** Vollst√§ndige Nachvollziehbarkeit der Analyse

::: fragment
### ‚úÖ Am Ende jedes Skripts:
```r
# Session information for reproducibility
sessionInfo()
```
::: 

::: fragment
::: {.callout-tip}
## Praxis-Tipp
Entwedern in Quarto direkt rendern oder in separatem File speichern:
```r
writeLines(capture.output(sessionInfo()), "session_info.txt")
```
:::
:::

# Dynamische Reports
## Typischer, nicht-dynamischer Workflow

![@Molo2025](img/non-dynamic-workflow.jpg){height="400"}

------------------------------------------------------------------------

## Typische Probleme

:::::: {.columns align="center"}
::: {.column width="40%" align="top"}
![@Molo2025](img/dependencies.png){height="400"}
:::

:::: {.column width="60%"}
::: incremental
- **unklarer** Ausf√ºhrungsreihenfolge

- **Zeitaufwendiges** Copy-Pasten

- **Fehleranf√§lliges** Copy-Pasten

<!-- -   unclear further processing of images and tables\ -->
:::
::::
::::::

------------------------------------------------------------------------

## Dynamische Reports: Das Ziel {.center}

[`Daten` $\rightarrow$ dynamischer Report $\rightarrow$ `Manuskript`]{style="font-size: 1.5em;"}

------------------------------------------------------------------------

## Ein Workflow f√ºr dynamische Reports

![@Molo2025](img/dynamic-workflow.jpg)


------------------------------------------------------------------------

## Komponenten eines dynamischen Reports

![@Molo2025](img/dynamic_reporting_components.png)



------------------------------------------------------------------------

## Text: Typische Markup-Sprachen

![@Molo2025](img/markup-languages.png)

------------------------------------------------------------------------


## Manche Implementierungen

\
\

|   | Datei | Code | Markup | Output Formate |
|---------------|---------------|---------------|---------------|---------------|
| Sweave | .Rnw | R | LaTeX | pdf, tex |
| R Markdown | .Rmd | R | Markdown | pdf, html, tex, docx, pptx |
| Jupyter Notebook | .ipynb | Julia, Python, R | Markdown | pdf, html, tex, py, ... |
| Quarto | .qmd | Julia, Python, R | Markdown | pdf, html, tex, docx, pptx, ... |

: {.striped tbl-colwidths="\[29,10,26,18,38\]"}

------------------------------------------------------------------------

## Warum Quarto?

::::: columns
::: {.column width="75%"}
- **open source**
- **modern**, wird kontinuierlich weiterentwickelt
- **einfache Handhabung**
- **Mehrere Programmiersprachen** (z.B. R, Python, Julia)
- **vielf√§ltige Editoren/IDEs** (z. B. RStudio, VS Code)
- **allgemeines** wissenschaftliches Publikationssystem (z. B. Artikel, Folien, Websites)
:::

::: {.column width="25%"}
![[<https://quarto.org/quarto.png>]{style="font-size:0.6em"}](img/quarto.png)
:::
:::::

------------------------------------------------------------------------

## Quarto in RStudio

![@Molo2025](img/quarto-rstudio-example-html.jpg){fig-align="center" width="82%"}


------------------------------------------------------------------------

## Quarto in RStudio: PDF Output

![@Molo2025](img/quarto-rstudio-example-pdf.png){fig-align="center" width="82%"}

------------------------------------------------------------------------

## Quarto in RStudio: MS Word output

![@Molo2025](img/quarto-rstudio-example-word.png){fig-align="center" width="82%"}


------------------------------------------------------------------------

## Weitere Literatur

-   CRS Primer zu dynamischen Reports: <https://doi.org/10.5281/zenodo.7565735>\
-   Quarto Intro Tutorial: <https://quarto.org/docs/get-started/hello/rstudio.html>\
-   Quarto Authoring Tutorial: <https://quarto.org/docs/get-started/authoring/>\
-   Quarto Layout: <https://quarto.org/docs/authoring/article-layout.html>\
-   R4DS Kapitel zu Quarto: <https://r4ds.hadley.nz/quarto>\
-   Yihui Xie's Blog: [With Quarto coming, is R Markdown going away? No.](https://yihui.org/en/2022/04/quarto-r-markdown/)\
-   Reproducible manuscripts with Quarto: [Folien von Mine Cetinkaya-Rundel](https://mine.quarto.pub/manuscripts-conf23/#/title-slide)\
-   Quarto/RMarkdown -- What's different?: [Folien von Ted Laderas](https://laderast.github.io/qmd_rmd/#/title-slide)

------------------------------------------------------------------------

## Session Info
```{r}
pander::pander(sessionInfo())
```
------------------------------------------------------------------------
## Literatur {.smaller}
